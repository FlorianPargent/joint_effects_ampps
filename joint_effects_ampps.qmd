---
title: "Toy example: Causal effects of smartphone usage on sleep quality"
authors: "Florian Pargent and Lukas Junker"
date: today
format: html
---

# Introduction

# Demonstration in R

## Load packages

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(dagitty)
library(brms)
library(cmdstanr)
library(tidybayes)
```

## Specify the data generating process

### Draw the DAG

```{r}
#| code-fold: true
dag <- dagitty('dag{
  A1 -> L <- U
  A1 -> A2 <- L
  A1 -> Y <- A2
  L -> Y <- U
  A1[pos="0,2"]
  A2[pos="1,2"]
  Y[pos="1.5,1.5"]
  L[pos="0.5,1.5"]
  U[pos="1,1"]
  }')
plot(dag)
```

### Specify functional relationships

```{r}
b_L_A1 <- 1
b_L_U <- 1
b_A2_A1 <- -3
b_A2_L <- 0.5
b_A2_U <- 0
b_Y_A1 <- -0.1
b_Y_A2 <- -3
b_Y_L <- -1
b_Y_A1A2 <- -0.5
b_Y_U <- -2


f_U <- function(){
  rnorm(n)}
f_A1 <- function(){
  rbinom(n, size = 1, prob = 0.5)}
f_L <- function(A1, U){
  rnorm(n, mean = b_L_A1 * A1 + b_L_U * U)}
f_A2 <- function(A1, L){
  rbinom(n, size = 1, prob = pnorm(b_A2_A1 * A1 + b_A2_L* L + b_A2_U * U))}
f_Y <- function(A1, A2, L, U){
  rnorm(n, mean = b_Y_A1 * A1 + b_Y_A2 * A2 + b_Y_A1A2 * A1 * A2 + b_Y_L * L +
      b_Y_U * U, sd = 0.1)} 
```

## Determine the true causal effects

### Simulate total effect of A1

$E(Y^{a_1=1}) - E(Y^{a_1=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_1: Y^{a_1=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y_1 <- f_Y(A1, A2, L, U)

# Y_0: Y^{a_1=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y_0 <- f_Y(A1, A2, L, U)

# E(Y_1) - E(Y_0)
(total_A1 <- mean(Y_1) - mean(Y_0))
```

::: {.callout-caution collapse="true"}

### Compute the total effect of A1 analytically

$$
\begin{aligned}
& E(Y^{a_1=1}) - E(Y^{a_1=0})\\
& = \dots \\
& = \beta_{YA1} + \beta_{YL} \beta_{LA1} + \beta_{YA1} \left[ \Phi \left(\frac{\beta_{A2A1} + \beta_{A2L} \beta_{LA1}}{\sqrt{1 + \beta_{A2L}^2 + \beta_{A2L}^2 \beta_{LU}^2}}\right) - 0.5 \right] + \beta_{YA1A2} \ \Phi \left(\frac{\beta_{A2A1} + \beta_{A2L} \beta_{LA1}}{\sqrt{1 + \beta_{A2L}^2 + \beta_{A2L}^2 \beta_{LU}^2 }}\right) = \\
& = 
`r (b_Y_A1 + b_Y_L * b_L_A1) + b_Y_A2 * (pnorm((b_A2_A1 + b_A2_L * b_L_A1) / sqrt(1 + b_A2_L ^2 + b_A2_L ^2 * b_L_U^2)) - pnorm((0) / sqrt(1 + b_A2_L ^2 + b_A2_L ^2 * b_L_U^2))) + b_Y_A1A2 * pnorm((b_A2_A1 + b_A2_L * b_L_A1) / sqrt(1 + b_A2_L ^2 + b_A2_L ^2 * b_L_U^2))` \\
\end{aligned}
$$

*Note:*

- The equation was derived by ChatGPT (o3-mini-high).
- The equation only holds for our concrete data generating process. It additionally assumes that 1) for all equations in the data generating process the intercepts are equal to 0, and 2) U and L are simulated with residual variance equal to 1.

:::

### Simulate joint effect "always - never"

$E(Y^{a_1=1, a_2=1}) - E(Y^{a_1=0, a_2=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_11: Y^{a_1=1, a_2=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- rep(1, n) # intervention
Y_11 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_11) - E(Y_00)
(joint_always <- mean(Y_11) - mean(Y_00))
```

::: {.callout-caution collapse="true"}

### Compute the joint effect "always - never" analytically

$$
\begin{aligned}
& E(Y^{a_1=1, a_2=1}) - E(Y^{a_1=0, a_2=0})\\
& = \dots \\
& = \beta_{YA1} + \beta_{YA2} + \beta_{YA1A2} + \beta_{YL} \beta_{LA1} \\
& = `r b_Y_A1 + b_Y_A2 + b_Y_A1A2 + b_Y_L * b_L_A1` \\
\end{aligned}
$$

*Note:*

- The equation only holds for our concrete data generating process. It additionally assumes that for all equations in the data generating process the intercepts are equal to 0.
:::

### Simulate joint effect "early use"

$E(Y^{a_1=1, a_2=0}) - E(Y^{a_1=0, a_2=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_10: Y^{a_1=1, a_2=0}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- rep(0, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(joint_early <- mean(Y_10) - mean(Y_00))
```


### Simulate joint effect "late use"

$E(Y^{a_1=0, a_2=1}) - E(Y^{a_1=0, a_2=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_01: Y^{a_1=0, a_2=1}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- rep(1, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_01) - E(Y_00)
(joint_late <- mean(Y_10) - mean(Y_00))
```

### Simulate direct effect "always - never"

$E(Y^{a_1=1, L^{a_1=0}, a_2=1}) - E(Y^{a_1=0, L^{a_1=0}, a_2=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_10: Y^{a_1=1, L^{a_1=0}, a_2=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- rep(1, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(direct_always <- mean(Y_10) - mean(Y_00))
```

### Simulate direct effect "early use"

$E(Y^{a_1=1, L^{a_1=0}, a_2=0}) - E(Y^{a_1=0, L^{a_1=0}, a_2=0})$

```{r}
n <- 10000000
set.seed(42)

# Y_10: Y^{a_1=1, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- rep(0, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(direct_early <- mean(Y_10) - mean(Y_00))
```

### Simulate direct effect "late use"

$E(Y^{a_1=0, L^{a_1=0}, a_2=0}) - E(Y^{a_1=0, L^{a_1=0}, a_2=1})$

```{r}
n <- 10000000
set.seed(42)

# Y_01: Y^{a_1=0, L^{a_1=0}, a_2=1}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- rep(1, n) # intervention
Y_01 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_01) - E(Y_00)
(direct_late <- mean(Y_01) - mean(Y_00))
```


### Simulate direct effect of A1

$E(Y^{a_1=1, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}) - E(Y^{a_1=0, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}})$

```{r}
n <- 10000000
set.seed(42)

# Y_1: Y^{a_1=1, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- f_A2(A1 = rep(0, n), L)
Y_1 <- f_Y(A1, A2, L, U)

# Y_0: Y^{a_1=0, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <- f_A2(A1, L)
Y_0 <- f_Y(A1, A2, L, U)

# E(Y_1) - E(Y_0)
(direct_A1 <- mean(Y_1) - mean(Y_0))
```


## Simulate dataset

```{r}
n <- 2000
set.seed(42)

U <- f_U()
A1 <- f_A1()
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y <- f_Y(A1, A2, L, U)

dat <- data.frame(A1, A2, L, Y)
```

## Fit statistical models with brms

```{r}
#| message: false

set.seed(42)
fit_total <- brm(Y ~ A1,
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_total)

set.seed(42)
bf_L <- bf(L ~ A1)
bf_Y <- bf(Y ~ A1 + A2 + A1:A2 + L)
fit_joint <- brm(bf_L + bf_Y + set_rescor(FALSE),
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_joint)

set.seed(42)
bf_L <- bf(L ~ A1)
bf_A2 <- bf(A2 ~ A1 + L, family = bernoulli(link = probit))
bf_Y <- bf(Y ~ A1 + A2 + A1:A2 + L)
fit_direct <- brm(bf_L + bf_A2 + bf_Y + set_rescor(FALSE),
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_direct)
```

## Estimate causal effects

```{r}
params_total <- tidy_draws(fit_total)
params_joint <- tidy_draws(fit_joint)
params_direct <- tidy_draws(fit_direct)
N <- 10000

# total effect A1
total_A1_est <- params_total |> 
  group_by(.draw) |>
  mutate(
    E_Y_1 = {
      a1 <- rep(1, N)
      y <- rnorm(N, b_Intercept + b_A1 * a1, sd = sigma)
      mean(y)},
    E_Y_0 = {
      a1 <- rep(0, N)
      y <- rnorm(N, b_Intercept + b_A1 * a1, sd = sigma)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_1 - E_Y_0) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# joint effect always - never
joint_always_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_11 = {
      a1 <- rep(1, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(1, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_11 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# joint effect early use
joint_early_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_10 = {
      a1 <- rep(1, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_10 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# joint effect late use
joint_late_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_01 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(1, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_01 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# direct effect always - never
direct_always_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_11 = {
      a1 <- rep(1, N)
      a1_0 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1_0, sd = sigma_L)
      a2 <- rep(1, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_11 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# direct effect early use
direct_early_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_10 = {
      a1 <- rep(1, N)
      a1_0 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1_0, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_10 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# direct effect late use
direct_late_est <- params_joint |> 
  group_by(.draw) |>
  mutate(
    E_Y_01 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(1, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_00 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rep(0, N)
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_01 - E_Y_00) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()

# direct effect A1
direct_A1_est <- params_direct |> 
  group_by(.draw) |>
  mutate(
    E_Y_1 = {
      a1 <- rep(1, N)
      a1_0 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1_0, sd = sigma_L)
      a2 <- rbinom(N, size = 1, prob = pnorm(b_A2_Intercept + b_A2_A1 * a1_0 + b_A2_L * l))
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
      mean(y)},
    E_Y_0 = {
      a1 <- rep(0, N)
      l <- rnorm(N, b_L_Intercept + b_L_A1 * a1, sd = sigma_L)
      a2 <- rbinom(N, size = 1, prob = pnorm(b_A2_Intercept + b_A2_A1 * a1 + b_A2_L * l))
      y <- rnorm(N, b_Y_Intercept + b_Y_A1 * a1 + b_Y_A2 * a2 + `b_Y_A1:A2` * a1 * a2 + b_Y_L * l, sd = sigma_Y)
    mean(y)}) |>
  mutate(E_Y_diff = E_Y_1 - E_Y_0) |>
  ungroup() |> select(E_Y_diff) |>
  summarise_draws()
```


## Compare true causal effects with empirical estimates

```{r}
#| code-fold: true

table <- tribble(
 ~"effect"                      ,~"true effect" ,~"estimate (med)"        ,~"ci (q5)"           ,~"ci (q95)",
  "total effect A1"             , total_A1      , total_A1_est$median     , total_A1_est$q5     , total_A1_est$q95     ,
  "joint effect always - never" , joint_always  , joint_always_est$median , joint_always_est$q5 , joint_always_est$q95 ,
  "joint effect early use"      , joint_early   , joint_early_est$median  , joint_early_est$q5  , joint_early_est$q95  ,
  "joint effect late use"       , joint_late    , joint_late_est$median   , joint_late_est$q5   , joint_late_est$q95   ,
  "direct effect always - never", direct_always , direct_always_est$median, direct_always_est$q5, direct_always_est$q95,
  "direct effect early use"     , direct_early  , direct_early_est$median , direct_early_est$q5 , direct_early_est$q95 ,
  "direct effect late use"      , direct_late   , direct_late_est$median  , direct_late_est$q5  , direct_late_est$q95  ,
  "direct effect A1"            , direct_A1     , direct_A1_est$median    , direct_A1_est$q5    , direct_A1_est$q95    ,

)
knitr::kable(table)
```

Note that the total and joint effects are estimated without bias, while the direct effects are biased because of the unobserved confounder U (except for the direct effect of "late use", which for our data generating process is equal to the joint effect of "late use").

# References

