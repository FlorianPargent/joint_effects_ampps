---
title: "Joint effects"
authors: "Florian Pargent"
date: today
format: html
---

# Toy example: The effect of smartphone usage on sleep quality 

# Demonstration in R

## Load packages

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(dagitty)
library(brms)
library(cmdstanr)
library(tidybayes)
```

## Specify the data generating process

### Draw the DAG

```{r}
#| code-fold: true
dag <- dagitty('dag{
  A1 -> L <- U
  A1 -> A2 <- L
  A1 -> Y <- A2
  L -> Y <- U
  A1[pos="0,2"]
  A2[pos="1,2"]
  Y[pos="1.5,1.5"]
  L[pos="0.5,1.5"]
  U[pos="1,1"]
  }')
plot(dag)
```

### Specify functional relationships

```{r}
b_L_A1 <- 1
b_L_U <- 1
b_A2_A1 <- -3
b_A2_L <- 0.5
b_A2_U <- 0
b_Y_A1 <- -0.1
b_Y_A2 <- -3
b_Y_L <- -1
b_Y_A1A2 <- -0.5
b_Y_U <- -1


f_U <- function(){
  rnorm(n)}
f_A1 <- function(){
  rbinom(n, size = 1, prob = 0.5)}
f_L <- function(A1, U){
  rnorm(n, mean = 1 + b_L_A1 * A1 + b_L_U * U, sd = 1)}
f_A2 <- function(A1, L){
  rbinom(n, size = 1, prob = plogis(2 + b_A2_A1 * A1 + b_A2_L* L + b_A2_U * U))}
f_Y <- function(A1, A2, L, U){
  rnorm(n, mean = 3 + b_Y_A1 * A1 + b_Y_A2 * A2 + b_Y_A1A2 * A1 * A2 + b_Y_L * L + b_Y_U * U, sd = 0.1)} 
```

## Simulate data

```{r}
n <- 2000
set.seed(42)

U <- f_U()
A1 <- f_A1()
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y <- f_Y(A1, A2, L, U)

dat <- data.frame(A1, A2, L, Y)
```

## Determine the true causal effects

### Simulate total effect of A1

$E(Y^{a_1=1}) - E(Y^{a_1=1})$

```{r}
n <- 1000000
set.seed(42)

# Y_1: Y^{a_1=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y_1 <- f_Y(A1, A2, L, U)

# Y_0: Y^{a_1=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- f_A2(A1, L)
Y_0 <- f_Y(A1, A2, L, U)

# E(Y_1) - E(Y_0)
(total_A1 <- mean(Y_1) - mean(Y_0))
```


### Simulate joint effect "always - never"

$E(Y^{a_1=1, a_2=1}) - E(Y^{a_1=1, a_2=0})$

```{r}
n <- 1000000
set.seed(42)

# Y_11: Y^{a_1=1, a_2=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- rep(1, n) # intervention
Y_11 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_11) - E(Y_00)
(joint_always <- mean(Y_11) - mean(Y_00))
```


### Simulate joint effect "early use"

$E(Y^{a_1=1, a_2=0}) - E(Y^{a_1=0, a_2=0})$

```{r}
n <- 1000000
set.seed(42)

# Y_10: Y^{a_1=1, a_2=0}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1, U)
A2 <- rep(0, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <- f_L(A1, U)
A2 <- rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(joint_early <- mean(Y_10) - mean(Y_00))
```


### Simulate natural direct effect of A1

$E(Y^{a_1=1, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}) - E(Y^{a_1=0, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}})$

```{r}
n <- 1000000
set.seed(42)

# Y_1: Y^{a_1=1, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- f_A2(A1 = rep(0, n), L)
Y_1 <- f_Y(A1, A2, L, U)

# Y_0: Y^{a_1=0, L^{a_1=0}, A_2^{a_1=0, L^{a_1=0}}}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <- f_A2(A1, L)
Y_0 <- f_Y(A1, A2, L, U)

# E(Y_1) - E(Y_0)
(direct_A1 <- mean(Y_1) - mean(Y_0))
```


### Simulate natural direct effect "early use"

$E(Y^{a_1=1, L^{a_1=0}, a_2=0}) - E(Y^{a_1=0, L^{a_1=0}, a_2=0})$

```{r}
n <- 1000000
set.seed(42)

# Y_10: Y^{a_1=1, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- rep(0, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(direct_early <- mean(Y_10) - mean(Y_00))
```


### Simulate natural direct effect "always - never"

$E(Y^{a_1=1, L^{a_1=0}, a_2=1}) - E(Y^{a_1=0, L^{a_1=0}, a_2=0})$

```{r}
n <- 1000000
set.seed(42)

# Y_10: Y^{a_1=1, L^{a_1=0}, a_2=1}

U <- f_U()
A1 <- rep(1, n) # intervention
L <- f_L(A1 = rep(0, n), U)
A2 <- rep(1, n) # intervention
Y_10 <- f_Y(A1, A2, L, U)

# Y_00: Y^{a_1=0, L^{a_1=0}, a_2=0}

U <- f_U()
A1 <- rep(0, n) # intervention
L <-  f_L(A1, U)
A2 <-  rep(0, n) # intervention
Y_00 <- f_Y(A1, A2, L, U)

# E(Y_10) - E(Y_00)
(direct_always <- mean(Y_10) - mean(Y_00))
```

## Fit statistical models with brms

```{r}
#| message: false

set.seed(42)
fit_naive <- brm(Y ~ A1 + A2 + L,
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_naive)

set.seed(42)
fit_total <- brm(Y ~ A1,
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_total)

set.seed(42)
bf_L <- bf(L ~ A1)
bf_Y <- bf(Y ~ A1 + A2 + A1:A2 + L)
fit_joint <- brm(bf_L + bf_Y + set_rescor(FALSE),
  data = dat, chains = 4, cores = 4, backend = "cmdstanr")
summary(fit_joint)
```

## Estimate causal effects

```{r}
params_naive <- tidy_draws(fit_naive)
params_total <- tidy_draws(fit_total)
params_joint <- tidy_draws(fit_joint)

# total effect A1
total_A1_est <- params_total |> 
  select(b_A1) |>
  summarise_draws()

# joint effect always - never
joint_always_est <- params_joint |> 
  mutate(E_Y_11 = b_Y_Intercept + b_Y_A1 + (b_L_Intercept + b_L_A1)*b_Y_L + b_Y_A2 + `b_Y_A1:A2`,
    E_Y_00 = b_Y_Intercept + (b_L_Intercept)*b_Y_L) |>
  mutate(E_Y_diff = E_Y_11 - E_Y_00) |>
  select(E_Y_diff) |>
  summarise_draws()

# joint effect early use
joint_early_est <- params_joint |> 
  mutate(E_Y_10 = b_Y_Intercept + b_Y_A1 + (b_L_Intercept + b_L_A1)*b_Y_L,
    E_Y_00 = b_Y_Intercept + (b_L_Intercept)*b_Y_L) |>
  mutate(E_Y_diff = E_Y_10 - E_Y_00) |>
  select(E_Y_diff) |>
  summarise_draws()

# direct effect early use
direct_early_est <- params_joint |> 
  mutate(E_Y_10 = b_Y_Intercept + b_Y_A1 + (b_L_Intercept)*b_Y_L,
    E_Y_00 = b_Y_Intercept + (b_L_Intercept)*b_Y_L) |>
  mutate(E_Y_diff = E_Y_10 - E_Y_00) |>
  select(E_Y_diff) |>
  summarise_draws()

# direct effect always - never
direct_always_est <- params_joint |> 
  mutate(E_Y_11 = b_Y_Intercept + b_Y_A1 + (b_L_Intercept)*b_Y_L + b_Y_A2 + `b_Y_A1:A2`,
    E_Y_00 = b_Y_Intercept + (b_L_Intercept)*b_Y_L) |>
  mutate(E_Y_diff = E_Y_11 - E_Y_00) |>
  select(E_Y_diff) |>
  summarise_draws()

# direct effect A1 naive estimate
direct_A1_est <- params_naive |> 
  select(b_A1) |>
  summarise_draws()
```

## Compare true causal effects with estimates

```{r}
#| code-fold: true

table <- tribble(
 ~"effect"                      ,~"true effect" ,~"estimate (med)"        ,~"ci (q5)"           ,~"ci (q95)",
  "total effect A1"             , total_A1      , total_A1_est$median     , total_A1_est$q5     , total_A1_est$q95     ,
  "joint effect always - never" , joint_always  , joint_always_est$median , joint_always_est$q5 , joint_always_est$q95 ,
  "joint effect early use"      , joint_early   , joint_early_est$median  , joint_early_est$q5  , joint_early_est$q95  ,
  "direct effect A1"            , direct_A1     , direct_A1_est$median    , direct_A1_est$q5    , direct_A1_est$q95    ,
  "direct effect early use"     , direct_early  , direct_early_est$median , direct_early_est$q5 , direct_early_est$q95 ,
  "direct effect always - never", direct_always , direct_always_est$median, direct_always_est$q5, direct_always_est$q95
)
knitr::kable(table)
```

As can be seen from the DAG, the estimate for the direct effects must be biased. In any case, they can not be estimated without bias with the naive estimate (if U had no effect, the naive estimate would be unbiased for the direct effect of A1). 

All other effects can be identified and estimated without bias (at least in theory). However, note that this is only true for our very specific DAG. If (for example), U would have a direct causal effect on A2, only the total effect of A1 but none of the other effects could be identified and estimated without bias.
You could verify this by changing the value of the variable `b_A2_U <- -1.5` in the functional relationship code and repeat the simulation. 

# References

